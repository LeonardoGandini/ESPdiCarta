esphome:
  name: carta-diggitale
  friendly_name: carta diggitale
  on_boot:
    priority: -10
    then:
      - delay: 10s
      - component.update: epaper  

esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: "runCGvJaVNPxH5nFCPSwxtk61yTmQrFOP2N0UfSJjyk="

ota:
  password: "d914193e08e3fb4f1b8b49738565c234"

font:
  - file: 'fonts/Roboto-Regular.ttf'
    id: font_regular
    size: 25
  - file: 'fonts/Roboto-Regular.ttf'
    id: font_regular_75
    size: 75
    glyphs:
      ['&', '@', '!', ',', '.', '"', '%', '’','(', ')', '+', '-', '_', ':', '°', '0',
       '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E',
       'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S',
       'T', 'U', 'V', 'W', 'X', 'Y', 'Z', ' ', 'a', 'b', 'c', 'd', 'e', 'f',
       'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't',
       'u', 'v', 'w', 'x', 'y', 'z','å', 'ä', 'ö', '/','º','µ','³']    
    
  - file: 'fonts/Itim-Regular.ttf'
    id: font_date
    size: 35

  - file: 'fonts/materialdesignicons-webfont.ttf'
    id: icon_font
    size: 65
    glyphs: [
      "󰿑", # master bedroom
      "󰇦", # gym
      "󱄫", # attic
      "󰒍", # server
      "󱕭", # living room
      "󱠝", # kitchen
      "󰌢", # lg studio
      "󰪫" # al studio
      ]

  - file: 'fonts/materialdesignicons-webfont.ttf'
    id: icon_font_small
    size: 25
    glyphs: [
      "󱃃", # temperature
      "󰖎" # humidity
      ]

  - file: 'fonts/Itim-Regular.ttf'
    id: clockfont
    size: 64
    glyphs:
      ['&', '@', '!', ',', '.', '"', '%', '’','(', ')', '+', '-', '_', ':', '°', '0',
       '1', '2', '3', '4', '5', '6', '7', '8', '9']  

  - file: 'fonts/KleeOne-SemiBold.ttf'
    id: jaweekfont
    size: 70
    glyphs:
      ['月','火','水','木','金','土','日']    


wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password    

spi:
  clk_pin: GPIO13
  mosi_pin: GPIO14
  id: epaper_display

time:
  - platform: homeassistant
    id: homeassistant_time
    timezone: Europe/London
    on_time:
      # Every 1 minutes
      - seconds: 0
        then:
          - component.update: epaper

sensor:
  # Kitchen
  - platform: homeassistant
    entity_id: sensor.kitchen_temperature
    id: kitchen_temp
  - platform: homeassistant
    entity_id: sensor.kitchen_humidity
    id: kitchen_hum

  # Living Room
  - platform: homeassistant
    entity_id: sensor.living_room_temperature
    id: livingroom_temp
  - platform: homeassistant
    entity_id: sensor.living_room_humidity
    id: livingroom_hum    

  # Master Bedroom
  - platform: homeassistant
    entity_id: sensor.master_bedroom_temperature
    id: mastbed_temp
  - platform: homeassistant
    entity_id: sensor.master_bedroom_humidity
    id: mastbed_hum    

  # Guest Bedroom
  - platform: homeassistant
    entity_id: sensor.guest_bedroom_temperature
    id: guestbed_temp
  - platform: homeassistant
    entity_id: sensor.guest_bedroom_humidity
    id: guestbed_hum  

  # AL Studio
  - platform: homeassistant
    entity_id: sensor.al_studio_temperature
    id: alstudio_temp
  - platform: homeassistant
    entity_id: sensor.al_studio_humidity
    id: alstudio_hum  

  # LG Studio
  - platform: homeassistant
    entity_id: sensor.lg_studio_temperature
    id: lgstudio_temp
  - platform: homeassistant
    entity_id: sensor.lg_studio_humidity
    id: lgstudio_hum  


  # Attic
  - platform: homeassistant
    entity_id: sensor.zigbee_21602_1_1_temperature
    id: attic_temp
  - platform: homeassistant
    entity_id: sensor.zigbee_21602_1_1_zigbee_21602_1_2_relative_humidity
    id: attic_hum

  # Server
  - platform: homeassistant
    entity_id: sensor.server_temp_temperature
    id: server_temp
  - platform: homeassistant
    entity_id: sensor.server_hum_relative_humidity
    id: server_hum




binary_sensor:
  - platform: homeassistant
    entity_id: binary_sensor.contact_sensor_3
    id: gym_door
    device_class: door
  - platform: homeassistant
    entity_id: binary_sensor.server_door
    id: server_door
    device_class: door
  - platform: homeassistant
    entity_id: binary_sensor.contact_sensor_2
    id: main_door
    device_class: door

display:
  - platform: waveshare_epaper
    id: epaper  
    cs_pin: GPIO15
    dc_pin: GPIO27
    busy_pin: GPIO25
    reset_pin: GPIO26
    model: 7.50inV2alt
    rotation: 90
    update_interval: 12min
    #reset_duration: 2ms

    lambda: |-
      ESP_LOGI("display", "Updating...");

      float kitchtemp = id(kitchen_temp).state;
      float kitchhum = id(kitchen_hum).state;

      float livingroomtemp = id(livingroom_temp).state;
      float livingroomhum = id(livingroom_hum).state;

      float mastbedtemp = id(mastbed_temp).state;
      float mastbedhum = id(mastbed_hum).state;

      float guestbedtemp = id(guestbed_temp).state;
      float guestbedhum = id(guestbed_hum).state;

      float alstudiotemp = id(alstudio_temp).state;
      float alstudiohum = id(alstudio_hum).state;

      float lgstudiotemp = id(lgstudio_temp).state;
      float lgstudiohum = id(lgstudio_hum).state;

      float attictemp = id(attic_temp).state;
      float attichum = id(attic_hum).state;

      float servertemp = id(server_temp).state;
      float serverhum = id(server_hum).state;

      int Ycenter = 240;
      int jawY = 720;
      int enwY = 365;
      int grid_thick = 2;

      //Linee Verticali
      //it.line(Ycenter, 20, Ycenter, 150);
      //it.line(Ycenter, 390, Ycenter, 530);
      //Linee Orizzontali
      //it.line(20, 270, 120, 270);
      //it.line(360, 270, 460, 270);

      it.circle(Ycenter, 730, 50);

 
      //low separator
      it.filled_rectangle(40, 660, 400, 3);

      //Date
      it.strftime(100, 710 , id(font_date), TextAlign::CENTER, "%B %d", id(homeassistant_time).now());
      it.strftime(100, 760 , id(font_date), TextAlign::CENTER, "%A", id(homeassistant_time).now());


      //ora
      it.strftime(378, 730 , id(clockfont), TextAlign::CENTER, "%H:%M", id(homeassistant_time).now());
      

      auto time_now = id(homeassistant_time).now().day_of_week;
        if (id(homeassistant_time).now().day_of_week == 1){ 
          it.printf(Ycenter, jawY, id(jaweekfont), TextAlign::CENTER, "日");
        }      
        if (id(homeassistant_time).now().day_of_week == 2){ 
          it.printf(Ycenter, jawY, id(jaweekfont), TextAlign::CENTER, "月");
        }
        if (id(homeassistant_time).now().day_of_week == 3){ 
          it.printf(Ycenter, jawY, id(jaweekfont), TextAlign::CENTER, "火");
        }      
        if (id(homeassistant_time).now().day_of_week == 4){ 
          it.printf(Ycenter, jawY, id(jaweekfont), TextAlign::CENTER, "水");
        }
        if (id(homeassistant_time).now().day_of_week == 5){ 
          it.printf(Ycenter, jawY, id(jaweekfont), TextAlign::CENTER, "木");
        }      
        if (id(homeassistant_time).now().day_of_week == 6){ 
          it.printf(Ycenter, jawY, id(jaweekfont), TextAlign::CENTER, "金");
        }
        if (id(homeassistant_time).now().day_of_week == 7){ 
          it.printf(Ycenter, jawY, id(jaweekfont), TextAlign::CENTER, "土");
        }
                        

      //it.printf(Ycenter, 480, id(font_regular), TextAlign::CENTER , "Temp is %.1f°C and Hum is %.2f%%", kitchtemp, kitchhum);
      
      int gridV1 = 60;
      int gridV2 = 180;
      int gridV3 = 300;
      int gridV4 = 420;

      int gridH1 = 50;
      int gridH2 = 250;      

      //Living Room
      it.printf(gridV1, gridH1, id(icon_font), TextAlign::CENTER , "󱕭");
      //it.printf(gridV1, 90, id(font_regular), TextAlign::CENTER , "T %.1f°C", livingroomtemp);
      //it.printf(gridV1, 120, id(font_regular), TextAlign::CENTER , "H %.2f%%", livingroomhum);

      //Gym
      it.printf(gridV2, gridH1, id(icon_font), TextAlign::CENTER , "󰇦");
      it.printf(gridV2, gridH1 + 10, id(icon_font_small), TextAlign::CENTER , "󱃃");
      it.printf(gridV2, 130, id(icon_font_small), TextAlign::CENTER , "󰖎");

      //Kitchen
      it.printf(gridV3, gridH1, id(icon_font), TextAlign::CENTER , "󱠝");

      //Master Bedroom
      it.printf(gridV4, gridH1, id(icon_font), TextAlign::CENTER , "󰿑");




      //Attic
      it.printf(gridV1, gridH2, id(icon_font), TextAlign::CENTER , "󱄫");


      //Server
      it.printf(gridV2, gridH2, id(icon_font), TextAlign::CENTER , "󰒍");


      //LG studio
      it.printf(gridV3, gridH2, id(icon_font), TextAlign::CENTER , "󰌢");


      //AL Studio
      it.printf(gridV4, gridH2, id(icon_font), TextAlign::CENTER , "󰪫");



      //GRID
      it.filled_rectangle(0, 0, 480, grid_thick);
      it.filled_rectangle(0, 200, 480, grid_thick);
      it.filled_rectangle(0, 400, 480, grid_thick);

      it.filled_rectangle(0, 0, grid_thick, 400);  
      it.filled_rectangle(120, 0, grid_thick, 400);
      it.filled_rectangle(Ycenter, 0, grid_thick, 400);
      it.filled_rectangle(360, 0, grid_thick, 400);      
      it.filled_rectangle(477, 0, grid_thick, 400);        